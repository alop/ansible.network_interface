---
- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

# RedHat specific stuff
- include: redhat.yml
  when: ansible_os_family == 'RedHat'
# Debian/Ubuntu specific stuff
- include: debian.yml
  when: ansible_os_family == "Debian"

# Create configuration files in the net_path for ethernet, vlan, bond and bridge interfaces
- name: Create the network configuration file for ethernet devices
  template: src=ethernet_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: "{{ network_ether_interfaces }}"
  when: network_ether_interfaces is defined
  register: ether_result

- name: Create the network configuration file for slave in the bond devices
  template: src=bond_slave_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  with_subelements:
   - "{{ network_bond_interfaces }}"
   - bond_slaves
  when: network_bond_interfaces is defined
  register: bond_port_result

- name: Create the network configuration file for bond devices
  template: src=bond_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: "{{ network_bond_interfaces }}"
  when: network_bond_interfaces is defined
  register: bond_result

- name: Make sure the bonding module is loaded
  modprobe: name=bonding state=present
  when: bond_result|changed

- name: Create the network configuration file for vlan devices
  template: src=ethernet_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces is defined
  register: vlan_result

- name: Create the network configuration file for bridge devices
  template: src=bridge_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined
  register: bridge_result

- name: Create the network configuration file for port on the bridge devices
  template: src=bridge_port_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  with_subelements:
    - '{{ network_bridge_interfaces }}'
    - bridge_ports
  when: network_bridge_interfaces is defined
  register: bridge_port_result

# Remove configuration files for ignored interfaces
- name: Remove the network configuration files for ignored devices
  file: path={{ net_path }}/ifcfg-{{ item.device }} state=absent
  with_items: "{{ network_ignore_interfaces }}"
  when: network_ignore_interfaces is defined
  register: ignore_result

# Restart Network Interfaces (deconfigurate & reconfigurate interfaces)
- include: restartscript.yml
  when: network_allow_service_restart and ansible_os_family == 'Debian'

- name: Checking if the "network" service is enabled
  service: name=network enabled=yes
  check_mode: yes
  register: network_service
  ignore_errors: true
  when: network_allow_service_restart and ansible_os_family == 'RedHat'

- set_fact:
    network_service_enabled: "{{ not network_service.failed
        and not network_service.changed }}"
  when: network_allow_service_restart and ansible_os_family == 'RedHat'

- name: Checking if the "NetworkManager" service is enabled
  service: name=NetworkManager enabled=yes
  check_mode: yes
  register: NetworkManager_service
  ignore_errors: true
  when: network_allow_service_restart and ansible_os_family == 'RedHat'

- set_fact:
    NetworkManager_service_enabled: "{{ not NetworkManager_service.failed
        and not NetworkManager_service.changed }}"
  when: network_allow_service_restart and ansible_os_family == 'RedHat'

- name: Restart the "network" service on Red Hat systems
  service: name=network state=restarted
  when: >
    (network_allow_service_restart
     and ansible_os_family == 'RedHat'
     and network_service_enabled)
     and (ether_result | changed
          or bond_port_result | changed
          or bond_result | changed
          or vlan_result | changed
          or bridge_result | changed
          or bridge_port_result | changed
          or ignore_result |changed)

- name: Restart the "NetworkManager" service on Red Hat systems
  service: name=network state=restarted
  when: >
    (network_allow_service_restart
    and ansible_os_family == 'RedHat'
    and NetworkManager_service_enabled) and
    (ether_result | changed or
     bond_port_result | changed or
     bond_result | changed or
     vlan_result | changed or
     bridge_result | changed or
     bridge_port_result | changed or
     ignore_result | changed)
